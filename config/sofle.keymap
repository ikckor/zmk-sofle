#include <behaviors/mouse_keys.dtsi>
#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/mouse.h>
#include <dt-bindings/zmk/outputs.h>
#include <dt-bindings/zmk/rgb.h>

#define ZMK_MOUSE_DEFAULT_MOVE_VAL 1200  // 600
#define ZMK_MOUSE_DEFAULT_SCRL_VAL 20    // 10
#define U_MS_U &mmv MOVE_UP
#define U_MS_D &mmv MOVE_DOWN
#define U_MS_L &mmv MOVE_LEFT
#define U_MS_R &mmv MOVE_RIGHT
#define ZMK_MOUSE_DEFAULT_MOVE_VAL 1200  //  600
#define ZMK_MOUSE_DEFAULT_SCRL_VAL 20    // 10

/ {
    behaviors {
        mmv {
            acceleration-exponent = <1>;      // 1
            time-to-max-speed-ms = <900>;    // 40
            delay-ms = <0>;                   // 0
        };

        msc {
            acceleration-exponent = <1>;      // 0
            time-to-max-speed-ms = <400>;      // 500
            delay-ms = <0>;                   //   10
        };
    };

    scroll_encoder: scroll_encoder {
        compatible = "zmk,behavior-sensor-rotate";
        #sensor-binding-cells = <0>;
        bindings = <&msc SCRL_DOWN>, <&msc SCRL_UP>;

        tap-ms = <30>;
    };

    macros {
        copy: copy {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp RG(C)>;
            label = "COPY";
        };

        paste: paste {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp RG(V)>;
            label = "PASTE";
        };

        cut: cut {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp LG(X)>;
            label = "CUT";
        };
    };

    keymap {
        compatible = "zmk,keymap";

        default {
            bindings = <
&kp ESC     &kp N1     &kp N2            &kp N3  &kp N4        &kp N5       &kp LS(UP_ARROW)    &kp N6     &kp N7  &kp N8         &kp N9      &kp N0    &kp BACKSPACE
&kp TAB     &kp Q      &kp W             &kp E   &kp R         &kp T        &kp LS(DOWN_ARROW)  &kp Y      &kp U   &kp I          &kp O       &kp P     &kp BSLH
&kp F18     &kp A      &kp S             &kp D   &kp F         &kp G        &kp LEFT_ARROW      &kp H      &kp J   &kp K          &kp L       &kp SEMI  &kp APOS
&kp LSHFT   &kp Z      &kp X             &kp C   &kp V         &kp B        &kp RIGHT_ARROW     &kp N      &kp M   &kp COMMA      &kp DOT     &kp FSLH  &kp RIGHT_SHIFT
&kp C_MUTE  &kp LCTRL  &kp LA(LEFT_GUI)  &mo 2   &kp LEFT_GUI  &kp SPACE    &kp ENTER           &kp ENTER  &mo 3   &kp BACKSPACE  &kp DELETE  &mo 1
            >;

            sensor-bindings = <&inc_dec_kp C_VOLUME_UP C_VOL_DN>;
            display-name = "LAYER0";
        };

        options {
            bindings = <
&kp TILDE  &bt BT_SEL 0  &bt BT_SEL 1    &bt BT_SEL 2  &bt BT_SEL 3  &bt BT_SEL 4    &mmv MOVE_UP     &rgb_ug RGB_ON   &rgb_ug RGB_BRI  &rgb_ug RGB_SPI  &rgb_ug RGB_EFF  &trans       &trans
&trans     &bt BT_CLR    &bt BT_CLR_ALL  &trans        &trans        &trans          &mmv MOVE_DOWN   &rgb_ug RGB_OFF  &rgb_ug RGB_BRD  &rgb_ug RGB_SPD  &rgb_ug RGB_EFR  &trans       &trans
&trans     &out OUT_USB  &out OUT_BLE    &trans        &trans        &trans          &mmv MOVE_LEFT   &trans           &trans           &trans           &trans           &trans       &trans
&trans     &sys_reset    &trans          &bootloader   &trans        &trans          &mmv MOVE_RIGHT  &trans           &trans           &sys_reset       &soft_off        &bootloader  &trans
&trans     &trans        &trans          &trans        &trans        &trans          &mkp LCLK        &trans           &trans           &trans           &trans           &trans
            >;

            sensor-bindings = <&scroll_encoder>;
        };

        mouse {
            display-name = "layer1";
            bindings = <
&trans          &trans            &trans        &trans     &trans        &trans       &mmv MOVE_UP     &trans     &trans    &trans      &trans     &trans  &trans
&trans          &trans            &mkp LCLK     &mkp MCLK  &mkp RCLK     &mkp MB4     &mmv MOVE_DOWN   &kp PG_UP  &kp HOME  &kp UP      &kp END    &trans  &trans
&trans          &trans            &trans        &trans     &trans        &mkp MB5     &mmv MOVE_LEFT   &kp PG_DN  &kp LEFT  &kp DOWN    &kp RIGHT  &trans  &trans
&kp LEFT_SHIFT  &trans            &cut          &copy      &paste        &trans       &mmv MOVE_RIGHT  &trans     &trans    &kp INSERT  &trans     &trans  &trans
&kp C_MUTE      &kp LEFT_CONTROL  &kp LEFT_ALT  &trans     &kp LEFT_GUI  &kp SPACE    &mkp LCLK        &trans     &trans    &trans      &trans     &trans
            >;

            sensor-bindings = <&scroll_encoder>;
        };

        secondary {
            bindings = <
&kp F1          &kp F2                &kp F3                 &kp F4        &kp F5        &kp F6          &mmv MOVE_UP     &kp F7     &kp F8     &kp F9     &kp F10    &kp F11    &kp F12
&kp GRAVE       &kp LEFT_BRACKET      &kp RIGHT_BRACKET      &kp N7        &kp NUMBER_8  &kp NUMBER_9    &mmv MOVE_DOWN   &kp PG_UP  &kp HOME   &kp UP     &kp END    &kp MINUS  &kp EQUAL
&trans          &kp LEFT_BRACE        &kp RIGHT_BRACE        &kp NUMBER_4  &kp NUMBER_5  &kp NUMBER_6    &mmv MOVE_LEFT   &kp PG_DN  &kp LEFT   &kp DOWN   &kp RIGHT  &kp UNDER  &kp PLUS
&kp LEFT_SHIFT  &kp LEFT_PARENTHESIS  &kp RIGHT_PARENTHESIS  &kp NUMBER_1  &kp NUMBER_2  &kp NUMBER_3    &mmv MOVE_RIGHT  &trans     &kp GRAVE  &kp MINUS  &kp EQUAL  &trans     &trans
&kp C_MUTE      &kp LEFT_CONTROL      &kp LEFT_ALT           &kp NUMBER_0  &kp LEFT_GUI  &kp SPACE       &mkp LCLK        &trans     &trans     &trans     &trans     &trans
            >;

            display-name = "layer1";
            sensor-bindings = <&scroll_encoder>;
        };
    };
};
